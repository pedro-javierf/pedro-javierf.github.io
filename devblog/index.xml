<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devblog on PJ&#39;s Playground</title>
    <link>https://pedro-javierf.github.io/devblog/</link>
    <description>Recent content in Devblog on PJ&#39;s Playground</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 24 Jul 2019 19:40:38 +0200</lastBuildDate>
    
	<atom:link href="https://pedro-javierf.github.io/devblog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hacking The 3ds V: ARM Reversing, exploit chain and OpenMSET</title>
      <link>https://pedro-javierf.github.io/devblog/hacking3ds5/</link>
      <pubDate>Wed, 24 Jul 2019 19:40:38 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/hacking3ds5/</guid>
      <description>OpenMSET, first vulnerability Now it&amp;rsquo;s time to explain how to find an exploit blindly, or mostly blindy. In the last post we saw how to dump a piece of native dsi code running on the 3ds. This is a nice entrypoint, since it could give us code execution in the backwards compatibility mode. There are already other easier and more widespread methods to get code execution on the Nintendo DS which work for the Nintendo 3DS backwards mode, like flashcarts, or savegame hacks.</description>
    </item>
    
    <item>
      <title>Hacking The 3ds IV: Hardware attacks</title>
      <link>https://pedro-javierf.github.io/devblog/hacking3ds4/</link>
      <pubDate>Mon, 22 Jul 2019 19:35:38 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/hacking3ds4/</guid>
      <description>Introduction On this post I will talk about two different subjects, close to 3ds hacking but certainly related to distint attack surfaces. These are, first, hardware attacks explained (finally!) with the best possible examples and attempts of implementations, and next, the finding of a vulnerability in native 3ds mode through backwards compatibility, with the release of free and open source code to trigger the vulnerability, which will also be used as a fuzzing platform for the future entries of this series.</description>
    </item>
    
    <item>
      <title>Hacking The 3ds III: Browsing the memory</title>
      <link>https://pedro-javierf.github.io/devblog/hacking3ds3/</link>
      <pubDate>Wed, 30 Jan 2019 19:35:38 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/hacking3ds3/</guid>
      <description>Introduction Welcome again. Finally, it&amp;rsquo;s time to go back and continue hacking the Nintendo 3ds. Previously, I got raw RAM dumps where several unicode strings could be found, evidencing the data was not encrypted or secured at all in RAM. This also applies for code, binary&amp;rsquo;s code sections may be also loaded in memory (as we saw using entropy) so we can extract them and reverse them.
Identifying code Even though I used binvis and could clearly see the differences between data and code, it wasn&amp;rsquo;t precise enough to get addresses.</description>
    </item>
    
    <item>
      <title>Hacking The 3ds II: Finding the Pattern</title>
      <link>https://pedro-javierf.github.io/devblog/hacking3ds2/</link>
      <pubDate>Mon, 12 Jun 2017 11:30:48 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/hacking3ds2/</guid>
      <description>Hello again! I&amp;rsquo;m back with part 2: &amp;ldquo;Finding The Pattern&amp;rdquo;! In case you haven&amp;rsquo;t read yet the first blog entry, click here.
Brief Summary Back in the day, I analysed what possible entry-points the 3DS may have. We lead to the conclusion that the RAM contents were not encrypted. This is something useful. Here&#39;s proof:
 First glance at the RAM Dump. Byte class view.
 As you can see, if we search for unicode strings (remember the 3DS supports several languages, as everything should do this days, to enable non-ascii languages to work, i.</description>
    </item>
    
    <item>
      <title>Hacking The 3ds I: Introduction</title>
      <link>https://pedro-javierf.github.io/devblog/hacking3ds1/</link>
      <pubDate>Mon, 12 Jun 2017 11:17:57 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/hacking3ds1/</guid>
      <description>Hello back! Today, a new series begin. A &amp;ldquo;journey&amp;rdquo; into hacking the Nintendo 3DS Handheld Console starts. There are several reasons why I am going to do this series;
 Personal Interest. During the later 2014, the 3DS Scene started growing. I was there, and was told I couldn&amp;rsquo;t get anything. The obnoxious sceners and community, only working for fame and personal interest. The lack of information and documentation about hacking blindly (Which is basically what I&amp;rsquo;ll be doing here) Exploit development is exciting and challenging</description>
    </item>
    
    <item>
      <title>Hacking The 3ds 0: Resources</title>
      <link>https://pedro-javierf.github.io/devblog/hacking3ds0/</link>
      <pubDate>Thu, 01 Jun 2017 20:49:36 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/hacking3ds0/</guid>
      <description>What is this This is an extra resources pages for storing useful information and resources related to the development of this series of articles. This includes tools, external articles, stack overflow posts, and any other kind of resource that is considered helpful. Consecuently it is also used to store, link to, and conserve information of value for my research.
URLs / Posts booting-process-for-arm
ARM Reset vector information
ARM Image Entrypoint Docs</description>
    </item>
    
    <item>
      <title>Twicexploit: Windows UAC Bypass</title>
      <link>https://pedro-javierf.github.io/devblog/bypassuac/</link>
      <pubDate>Wed, 31 May 2017 11:39:11 +0200</pubDate>
      
      <guid>https://pedro-javierf.github.io/devblog/bypassuac/</guid>
      <description>Hello My Fellow Readers!
Today I&amp;rsquo;m back to write about UAC bypassing, that amazing scene that malware writers love.
 What is UAC?
Since windows vista, Microsoft implemented the so called User Account Control (UAC); a mechanism which manages processes privileges. Basically, if you have a windows account which has administrator rights, and you run an application that doesn&amp;rsquo;t requiere administrator rights, UAC will drop the unnecessary privilges; This is done to avoid malwares having full control of the computer if they get code execution; to get admin rights UAC will prompt a question windows which will ask the user for permission, making malwares&amp;rsquo; job harder.</description>
    </item>
    
  </channel>
</rss>